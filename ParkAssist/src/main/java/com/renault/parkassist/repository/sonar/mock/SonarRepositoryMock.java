/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/repository/sonar-repository.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.repository.sonar.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.repository.sonar.SonarRepositoryBase;

import com.renault.parkassist.repository.sonar.DisplayType;
import com.renault.parkassist.repository.sonar.FkpDisplayRequestType;
import com.renault.parkassist.repository.sonar.GroupState;
import com.renault.parkassist.repository.sonar.SensorState;
import com.renault.parkassist.repository.sonar.UpaDisplayRequestType;

public class SonarRepositoryMock extends SonarRepositoryBase {
	public SonarRepositoryMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		upaRearFeaturePresent = false;
		upaFrontFeaturePresent = false;
		fkpFeaturePresent = false;
		upaFkpVisualFeedbackFeaturePresent = false;
		rctaFeaturePresent = false;
		raebFeaturePresent = false;
		rearUpaActivationSettingPresent = false;
		displayRequest.setValue(DisplayType.NONE);
		upaDisplayRequest.setValue(UpaDisplayRequestType.NO_DISPLAY);
		fkpDisplayRequest.setValue(FkpDisplayRequestType.NO_DISPLAY);
		obstacle.setValue(false);
		collisionAlertEnabled.setValue(false);
		collisionAlertSide.setValue(0);
		collisionAlertLevel.setValue(0);
		raebAlertEnabled.setValue(false);
		raebAlertState.setValue(0);
		closeAllowed.setValue(false);
		frontState.setValue(GroupState.DISABLED);
		rearState.setValue(GroupState.DISABLED);
		flankState.setValue(GroupState.DISABLED);
		frontLeft.setValue(new SensorState());
		frontCenter.setValue(new SensorState());
		frontRight.setValue(new SensorState());
		rearLeft.setValue(new SensorState());
		rearCenter.setValue(new SensorState());
		rearRight.setValue(new SensorState());
		leftFront.setValue(new SensorState());
		leftFrontCenter.setValue(new SensorState());
		leftRearCenter.setValue(new SensorState());
		leftRear.setValue(new SensorState());
		rightFront.setValue(new SensorState());
		rightFrontCenter.setValue(new SensorState());
		rightRearCenter.setValue(new SensorState());
		rightRear.setValue(new SensorState());
	}

	public void postReset() {
		upaRearFeaturePresent = false;
		upaFrontFeaturePresent = false;
		fkpFeaturePresent = false;
		upaFkpVisualFeedbackFeaturePresent = false;
		rctaFeaturePresent = false;
		raebFeaturePresent = false;
		rearUpaActivationSettingPresent = false;
		displayRequest.postValue(DisplayType.NONE);
		upaDisplayRequest.postValue(UpaDisplayRequestType.NO_DISPLAY);
		fkpDisplayRequest.postValue(FkpDisplayRequestType.NO_DISPLAY);
		obstacle.postValue(false);
		collisionAlertEnabled.postValue(false);
		collisionAlertSide.postValue(0);
		collisionAlertLevel.postValue(0);
		raebAlertEnabled.postValue(false);
		raebAlertState.postValue(0);
		closeAllowed.postValue(false);
		frontState.postValue(GroupState.DISABLED);
		rearState.postValue(GroupState.DISABLED);
		flankState.postValue(GroupState.DISABLED);
		frontLeft.postValue(new SensorState());
		frontCenter.postValue(new SensorState());
		frontRight.postValue(new SensorState());
		rearLeft.postValue(new SensorState());
		rearCenter.postValue(new SensorState());
		rearRight.postValue(new SensorState());
		leftFront.postValue(new SensorState());
		leftFrontCenter.postValue(new SensorState());
		leftRearCenter.postValue(new SensorState());
		leftRear.postValue(new SensorState());
		rightFront.postValue(new SensorState());
		rightFrontCenter.postValue(new SensorState());
		rightRearCenter.postValue(new SensorState());
		rightRear.postValue(new SensorState());
	}

	@Override
	public boolean getUpaRearFeaturePresent() {
		return upaRearFeaturePresent;
	}

	@Override
	public boolean getUpaFrontFeaturePresent() {
		return upaFrontFeaturePresent;
	}

	@Override
	public boolean getFkpFeaturePresent() {
		return fkpFeaturePresent;
	}

	@Override
	public boolean getUpaFkpVisualFeedbackFeaturePresent() {
		return upaFkpVisualFeedbackFeaturePresent;
	}

	@Override
	public boolean getRctaFeaturePresent() {
		return rctaFeaturePresent;
	}

	@Override
	public boolean getRaebFeaturePresent() {
		return raebFeaturePresent;
	}

	@Override
	public boolean getRearUpaActivationSettingPresent() {
		return rearUpaActivationSettingPresent;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getDisplayRequest() {
		return displayRequest;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getUpaDisplayRequest() {
		return upaDisplayRequest;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getFkpDisplayRequest() {
		return fkpDisplayRequest;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getObstacle() {
		return obstacle;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCollisionAlertEnabled() {
		return collisionAlertEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getCollisionAlertSide() {
		return collisionAlertSide;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getCollisionAlertLevel() {
		return collisionAlertLevel;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRaebAlertEnabled() {
		return raebAlertEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getRaebAlertState() {
		return raebAlertState;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCloseAllowed() {
		return closeAllowed;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getFrontState() {
		return frontState;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getRearState() {
		return rearState;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getFlankState() {
		return flankState;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getFrontLeft() {
		return frontLeft;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getFrontCenter() {
		return frontCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getFrontRight() {
		return frontRight;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRearLeft() {
		return rearLeft;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRearCenter() {
		return rearCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRearRight() {
		return rearRight;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getLeftFront() {
		return leftFront;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getLeftFrontCenter() {
		return leftFrontCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getLeftRearCenter() {
		return leftRearCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getLeftRear() {
		return leftRear;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRightFront() {
		return rightFront;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRightFrontCenter() {
		return rightFrontCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRightRearCenter() {
		return rightRearCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<SensorState> getRightRear() {
		return rightRear;
	}

	public boolean upaRearFeaturePresent;
	public boolean upaFrontFeaturePresent;
	public boolean fkpFeaturePresent;
	public boolean upaFkpVisualFeedbackFeaturePresent;
	public boolean rctaFeaturePresent;
	public boolean raebFeaturePresent;
	public boolean rearUpaActivationSettingPresent;
	protected MutableLiveData<Integer> displayRequest = new MutableLiveData<>();
	protected MutableLiveData<Integer> upaDisplayRequest = new MutableLiveData<>();
	protected MutableLiveData<Integer> fkpDisplayRequest = new MutableLiveData<>();
	protected MutableLiveData<Boolean> obstacle = new MutableLiveData<>();
	protected MutableLiveData<Boolean> collisionAlertEnabled = new MutableLiveData<>();
	protected MutableLiveData<Integer> collisionAlertSide = new MutableLiveData<>();
	protected MutableLiveData<Integer> collisionAlertLevel = new MutableLiveData<>();
	protected MutableLiveData<Boolean> raebAlertEnabled = new MutableLiveData<>();
	protected MutableLiveData<Integer> raebAlertState = new MutableLiveData<>();
	protected MutableLiveData<Boolean> closeAllowed = new MutableLiveData<>();
	protected MutableLiveData<Integer> frontState = new MutableLiveData<>();
	protected MutableLiveData<Integer> rearState = new MutableLiveData<>();
	protected MutableLiveData<Integer> flankState = new MutableLiveData<>();
	protected MutableLiveData<SensorState> frontLeft = new MutableLiveData<>();
	protected MutableLiveData<SensorState> frontCenter = new MutableLiveData<>();
	protected MutableLiveData<SensorState> frontRight = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rearLeft = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rearCenter = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rearRight = new MutableLiveData<>();
	protected MutableLiveData<SensorState> leftFront = new MutableLiveData<>();
	protected MutableLiveData<SensorState> leftFrontCenter = new MutableLiveData<>();
	protected MutableLiveData<SensorState> leftRearCenter = new MutableLiveData<>();
	protected MutableLiveData<SensorState> leftRear = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rightFront = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rightFrontCenter = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rightRearCenter = new MutableLiveData<>();
	protected MutableLiveData<SensorState> rightRear = new MutableLiveData<>();

	

	@Override
	public void enableCollisionAlert(boolean enable) {}

	@Override
	public void enableRearAutoEmergencyBreak(boolean enable) {}

	@Override
	public void setSonarGroup(
		int sonarGroupId,
		boolean enable
	) {}
}
