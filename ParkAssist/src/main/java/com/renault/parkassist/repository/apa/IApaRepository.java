/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/repository/apa-repository.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.repository.apa;

import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.LiveData;
import java.util.List;

/** Exposes automatic park assist service as livedatas. */
public interface IApaRepository {
	/**
	 * APA feature configuration
	 * according to vehicle configuration as exposed by the service
	 */
	int getFeatureConfiguration();

	/**
	 * Supported Maneuver types
	 * according to supported maneuver types as exposed by the service
	 */
	@NonNull
	List<Integer> getSupportedManeuvers();

	/**
	 * The display state is the main auto park state. It is controlled by ECU and is not managed
	 * by the auto park service. It controls APA application activation and also its current display.
	 * If state is DISPLAY_NONE, APA is disabled and can be activated on user request.
	 * Otherwise for all other display states, APA is enabled and can be deactivated.
	 */
	@NonNull
	LiveData<Integer> getDisplayState();

	/** Whether the left side of the car is suitable to park or not. */
	@NonNull
	LiveData<Boolean> getLeftSuitable();

	/** Whether the right side of the car is suitable to park or not. */
	@NonNull
	LiveData<Boolean> getRightSuitable();

	/** Whether the driver selected the left side with its indicator or not. */
	@NonNull
	LiveData<Boolean> getLeftSelected();

	/** Whether the driver selected the right side with its indicator or not. */
	@NonNull
	LiveData<Boolean> getRightSelected();

	/**
	 * Scanning side indicates which side of the vehicle the ECU is currently scanning for a
	 * suitable ParkingSlot. It is a notification HMI application uses to draw
	 * images and arrows on the display.
	 */
	@NonNull
	LiveData<Integer> getScanningSide();

	/**
	 * Automatic Maneuver is a boolean reporting if Status display is AUTOMATIC_MANEUVER_ON or not
	 * Status Display is a notification of the current APA status IVI and cluster are supposed to
	 * notify through a pictogram. On cluster it is regulatory, but not on IVI.
	 * Note that if  DisplayState is DISPLAY_GUIDANCE, we already
	 * know that an APA maneuver is ongoing, but status display provides more information such as
	 * AUTOMATIC_MANEUVER_STANDBY which indicates that ongoing maneuver is paused.
	 */
	@NonNull
	LiveData<Boolean> getAutomaticManeuver();

	/**
	 * Maneuver move is an indication of the APA maneuver vehicle direction during an ongoing
	 * maneuver. Depending on ManeuverMove client APA application draws different
	 * indications for the gauge arrow widget.
	 */
	@NonNull
	LiveData<Integer> getManeuverMove();

	/**
	 * During an ongoing maneuver in DISPLAY_GUIDANCE DisplayState,
	 * maneuver completion monitors maneuver progress as reported by ECU. It is used by HMI client
	 * for drawing a progress bar in the arrow widget.
	 * Value expressed in % unit.
	 */
	@NonNull
	LiveData<Integer> getManeuverCompletion();

	/**
	 * When APA is activated and DisplayState is not DISPLAY_NONE,
	 * ECU can provide instructions to display on client HMI application to guide user.
	 * Labels corresponding to each ExtendedInstruction depend on the vehicle's FeatureConfiguration.
	 */
	@NonNull
	LiveData<Integer> getExtendedInstruction();

	/**
	 * Warning messages are notifications sent by ECU that provide information to user about APA
	 * feature. They are displayed as dialog boxes with button controls so that user can acknowledge
	 * or give feedback to the ECU. Buttons are linked to acknowledgeWarning(int).
	 * Note: Dialog box are to be displayed on overlay over HMI no matter the current
	 * DisplayState of APA!
	 */
	@NonNull
	LiveData<Integer> getWarningMessage();

	/** Notify change on default maneuver type. */
	@NonNull
	LiveData<Integer> getDefaultManeuverType();

	/**
	 * Maneuver selection notifies of the current status for each
	 * maneuver type supported in the current configuration
	 */
	@NonNull
	LiveData<Integer> getManeuverSelection();

	/** Indicates the current selection of the parallel maneuver. */
	@NonNull
	LiveData<Integer> getParallelManeuverSelection();

	/** Indicates the current selection of the perpendicular maneuver. */
	@NonNull
	LiveData<Integer> getPerpendicularManeuverSelection();

	/** Indicates the current selection of the parkout maneuver. */
	@NonNull
	LiveData<Integer> getParkOutManeuverSelection();

	/** Indicates the current maneuver switch send by the ECU. */
	@NonNull
	LiveData<Integer> getManeuverSwitchSelection();

	/**
	 * View mask is a mechanism used in FAPK configuration only.
	 * It controls the HMI masking of the camera part of the video stream sent by the AVM ECU.
	 * Such masking can happen while scanning for parking slots when speed is comprised in a
	 * certain range. This is to avoid driver distraction while still allowing for APA features.
	 */
	@NonNull
	LiveData<Integer> getViewMask();

	/**
	 * Request a new user maneuver type choice.
	 * In APA, user can select different kinds of maneuvers that the ECU will try to perform.
	 * User cannot request a new maneuver type if ECU indicates MANEUVER_CHOICE_UNAVAILABLE.
	 * In that case service will raise an exception and will not perform the request.
	 * It is mapped to HFP_SelectedManeuverTypeRequest. Is is automatically reset to no request by
	 * VHAL after a 3000ms timeout, or before if HFP_SelectedManeuverType is changed by ECU.
	 *
	 * @param maneuverType Maneuver type.
	 */
	public void requestManeuverType(@ManeuverType int maneuverType);

	/**
	 * Acknowledge a warning message.
	 * In autopark, user can give input to dialog boxes which are raised through warning messages.
	 * If a message is not acknowledged, should it be not raised again it will clear itself.
	 * On dialog boxes with one button, ack. 1 should be used. With two buttons: ack. 1 and ack. 2.
	 * It is automatically reset to no ack. by VHAL after a 300ms timeout.
	 *
	 * @param userAck Client user acknowledgement UserAcknowledgement.
	 */
	public void acknowledgeWarning(int userAck);

	/**
	 * Set default maneuver type setting.
	 * This setting is applied on ECU through a dedicated signal. Service will automatically
	 * set the setting on the ECU upon initialization. It will also apply it on change.
	 *
	 * @param maneuverType
	 */
	public void setDefaultManeuverType(@ManeuverType int maneuverType);

	/**
	 * Request switch maneuver start of AutoPark to ECU.
	 * This is a switch activation: used both for activation and deactivation.
	 * Success or failure of this operation is known later through the display state callback.
	 * Autopark can only be activated by user request. This request is always available.
	 * As per specification, VHAL will maintain this signal pushed for 600ms before resetting.
	 */
	public void switchManeuverStartActivation();
}
