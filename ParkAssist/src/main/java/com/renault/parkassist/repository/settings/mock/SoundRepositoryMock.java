/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/repository/sound-repository.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.repository.settings.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.repository.settings.SoundRepositoryBase;

import com.renault.parkassist.repository.settings.SoundType;

public class SoundRepositoryMock extends SoundRepositoryBase {
	public SoundRepositoryMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		soundEnabled.setValue(false);
		oseEnabled.setValue(false);
		soundType.setValue(0);
		volume.setValue(0);
		muted.setValue(false);
		soundActivationControlPresence = false;
		soundSelectionControlPresence = false;
		soundTypes = new ArrayList<SoundType>();
		volumeControlPresence = false;
		minVolume = 0;
		maxVolume = 0;
		temporaryMuteControlPresence = false;
		oseControlPresence = false;
	}

	public void postReset() {
		soundEnabled.postValue(false);
		oseEnabled.postValue(false);
		soundType.postValue(0);
		volume.postValue(0);
		muted.postValue(false);
		soundActivationControlPresence = false;
		soundSelectionControlPresence = false;
		soundTypes = new ArrayList<SoundType>();
		volumeControlPresence = false;
		minVolume = 0;
		maxVolume = 0;
		temporaryMuteControlPresence = false;
		oseControlPresence = false;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getSoundEnabled() {
		return soundEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getOseEnabled() {
		return oseEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getSoundType() {
		return soundType;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getVolume() {
		return volume;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getMuted() {
		return muted;
	}

	@Override
	public boolean getSoundActivationControlPresence() {
		return soundActivationControlPresence;
	}

	@Override
	public boolean getSoundSelectionControlPresence() {
		return soundSelectionControlPresence;
	}

	@NonNull
	@Override
	public List<SoundType> getSoundTypes() {
		return soundTypes;
	}

	@Override
	public boolean getVolumeControlPresence() {
		return volumeControlPresence;
	}

	@Override
	public int getMinVolume() {
		return minVolume;
	}

	@Override
	public int getMaxVolume() {
		return maxVolume;
	}

	@Override
	public boolean getTemporaryMuteControlPresence() {
		return temporaryMuteControlPresence;
	}

	@Override
	public boolean getOseControlPresence() {
		return oseControlPresence;
	}

	protected MutableLiveData<Boolean> soundEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> oseEnabled = new MutableLiveData<>();
	protected MutableLiveData<Integer> soundType = new MutableLiveData<>();
	protected MutableLiveData<Integer> volume = new MutableLiveData<>();
	protected MutableLiveData<Boolean> muted = new MutableLiveData<>();
	public boolean soundActivationControlPresence;
	public boolean soundSelectionControlPresence;
	public List<SoundType> soundTypes;
	public boolean volumeControlPresence;
	public int minVolume;
	public int maxVolume;
	public boolean temporaryMuteControlPresence;
	public boolean oseControlPresence;

	

	@Override
	public void enableSound(boolean enable) {}

	@Override
	public void setSoundType(int id) {}

	@Override
	public void setVolume(int volume) {}

	@Override
	public void mute(boolean muted) {}

	@Override
	public void enableOse(boolean enable) {}
}
