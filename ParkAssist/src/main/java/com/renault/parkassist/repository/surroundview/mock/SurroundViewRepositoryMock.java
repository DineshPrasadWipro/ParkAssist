/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/repository/surround-view-repository.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.repository.surroundview.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.repository.surroundview.SurroundViewRepositoryBase;

import com.renault.parkassist.repository.surroundview.Action;
import com.renault.parkassist.repository.surroundview.ErrorState;
import com.renault.parkassist.repository.surroundview.FeatureConfig;
import com.renault.parkassist.repository.surroundview.ManeuverAvailability;
import com.renault.parkassist.repository.surroundview.Origin;
import com.renault.parkassist.repository.surroundview.SurroundState;
import com.renault.parkassist.repository.surroundview.TrailerPresence;
import com.renault.parkassist.repository.surroundview.TrunkState;
import com.renault.parkassist.repository.surroundview.UserAcknowledgement;
import com.renault.parkassist.repository.surroundview.View;
import com.renault.parkassist.repository.surroundview.WarningState;

public class SurroundViewRepositoryMock extends SurroundViewRepositoryBase {
	public SurroundViewRepositoryMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		featureConfig = FeatureConfig.RVC;
		surroundState.setValue(new SurroundState());
		authorizedActions.setValue(new ArrayList<Integer>());
		trailerPresence.setValue(TrailerPresence.TRAILER_PRESENCE_UNAVAILABLE);
		trunkState.setValue(TrunkState.TRUNK_DOOR_STATE_UNAVAILABLE);
		warningState.setValue(WarningState.WARNING_STATE_NONE);
		errorState.setValue(ErrorState.ERROR_STATE_NO_ERROR);
		brightness.setValue(0);
		color.setValue(0);
		contrast.setValue(0);
		autoZoomRearViewActivation.setValue(false);
		dynamicGuidelinesActivation.setValue(false);
		staticGuidelinesActivation.setValue(false);
		trailerGuidelinesActivation.setValue(false);
		isBrightnessSupported = true;
		brightnessMin = 0;
		brightnessMax = 20;
		isColorSupported = true;
		colorMin = 0;
		colorMax = 20;
		isContrastSupported = true;
		contrastMin = 0;
		contrastMax = 20;
		isAutoZoomSupported = true;
		isDynamicGuidelinesSupported = true;
		isStaticGuidelinesSupported = true;
		isTrailerGuidelinesSupported = true;
		is3DViewSupported = true;
		isPanoramicViewSupported = true;
		isTrailerViewSupported = true;
		isCameraOnTrunk = true;
		isRegulationApplicable = true;
	}

	public void postReset() {
		featureConfig = FeatureConfig.RVC;
		surroundState.postValue(new SurroundState());
		authorizedActions.postValue(new ArrayList<Integer>());
		trailerPresence.postValue(TrailerPresence.TRAILER_PRESENCE_UNAVAILABLE);
		trunkState.postValue(TrunkState.TRUNK_DOOR_STATE_UNAVAILABLE);
		warningState.postValue(WarningState.WARNING_STATE_NONE);
		errorState.postValue(ErrorState.ERROR_STATE_NO_ERROR);
		brightness.postValue(0);
		color.postValue(0);
		contrast.postValue(0);
		autoZoomRearViewActivation.postValue(false);
		dynamicGuidelinesActivation.postValue(false);
		staticGuidelinesActivation.postValue(false);
		trailerGuidelinesActivation.postValue(false);
		isBrightnessSupported = true;
		brightnessMin = 0;
		brightnessMax = 20;
		isColorSupported = true;
		colorMin = 0;
		colorMax = 20;
		isContrastSupported = true;
		contrastMin = 0;
		contrastMax = 20;
		isAutoZoomSupported = true;
		isDynamicGuidelinesSupported = true;
		isStaticGuidelinesSupported = true;
		isTrailerGuidelinesSupported = true;
		is3DViewSupported = true;
		isPanoramicViewSupported = true;
		isTrailerViewSupported = true;
		isCameraOnTrunk = true;
		isRegulationApplicable = true;
	}

	@Override
	public int getFeatureConfig() {
		return featureConfig;
	}

	@NonNull
	@Override
	public MutableLiveData<SurroundState> getSurroundState() {
		return surroundState;
	}

	@NonNull
	@Override
	public MutableLiveData<List<Integer>> getAuthorizedActions() {
		return authorizedActions;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getTrailerPresence() {
		return trailerPresence;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getTrunkState() {
		return trunkState;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getWarningState() {
		return warningState;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getErrorState() {
		return errorState;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getBrightness() {
		return brightness;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getColor() {
		return color;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getContrast() {
		return contrast;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getAutoZoomRearViewActivation() {
		return autoZoomRearViewActivation;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getDynamicGuidelinesActivation() {
		return dynamicGuidelinesActivation;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getStaticGuidelinesActivation() {
		return staticGuidelinesActivation;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getTrailerGuidelinesActivation() {
		return trailerGuidelinesActivation;
	}

	@Override
	public boolean getIsBrightnessSupported() {
		return isBrightnessSupported;
	}

	@Override
	public int getBrightnessMin() {
		return brightnessMin;
	}

	@Override
	public int getBrightnessMax() {
		return brightnessMax;
	}

	@Override
	public boolean getIsColorSupported() {
		return isColorSupported;
	}

	@Override
	public int getColorMin() {
		return colorMin;
	}

	@Override
	public int getColorMax() {
		return colorMax;
	}

	@Override
	public boolean getIsContrastSupported() {
		return isContrastSupported;
	}

	@Override
	public int getContrastMin() {
		return contrastMin;
	}

	@Override
	public int getContrastMax() {
		return contrastMax;
	}

	@Override
	public boolean getIsAutoZoomSupported() {
		return isAutoZoomSupported;
	}

	@Override
	public boolean getIsDynamicGuidelinesSupported() {
		return isDynamicGuidelinesSupported;
	}

	@Override
	public boolean getIsStaticGuidelinesSupported() {
		return isStaticGuidelinesSupported;
	}

	@Override
	public boolean getIsTrailerGuidelinesSupported() {
		return isTrailerGuidelinesSupported;
	}

	@Override
	public boolean getIs3DViewSupported() {
		return is3DViewSupported;
	}

	@Override
	public boolean getIsPanoramicViewSupported() {
		return isPanoramicViewSupported;
	}

	@Override
	public boolean getIsTrailerViewSupported() {
		return isTrailerViewSupported;
	}

	@Override
	public boolean getIsCameraOnTrunk() {
		return isCameraOnTrunk;
	}

	@Override
	public boolean getIsRegulationApplicable() {
		return isRegulationApplicable;
	}

	public int featureConfig;
	protected MutableLiveData<SurroundState> surroundState = new MutableLiveData<>();
	protected MutableLiveData<List<Integer>> authorizedActions = new MutableLiveData<>();
	protected MutableLiveData<Integer> trailerPresence = new MutableLiveData<>();
	protected MutableLiveData<Integer> trunkState = new MutableLiveData<>();
	protected MutableLiveData<Integer> warningState = new MutableLiveData<>();
	protected MutableLiveData<Integer> errorState = new MutableLiveData<>();
	protected MutableLiveData<Integer> brightness = new MutableLiveData<>();
	protected MutableLiveData<Integer> color = new MutableLiveData<>();
	protected MutableLiveData<Integer> contrast = new MutableLiveData<>();
	protected MutableLiveData<Boolean> autoZoomRearViewActivation = new MutableLiveData<>();
	protected MutableLiveData<Boolean> dynamicGuidelinesActivation = new MutableLiveData<>();
	protected MutableLiveData<Boolean> staticGuidelinesActivation = new MutableLiveData<>();
	protected MutableLiveData<Boolean> trailerGuidelinesActivation = new MutableLiveData<>();
	public boolean isBrightnessSupported;
	public int brightnessMin;
	public int brightnessMax;
	public boolean isColorSupported;
	public int colorMin;
	public int colorMax;
	public boolean isContrastSupported;
	public int contrastMin;
	public int contrastMax;
	public boolean isAutoZoomSupported;
	public boolean isDynamicGuidelinesSupported;
	public boolean isStaticGuidelinesSupported;
	public boolean isTrailerGuidelinesSupported;
	public boolean is3DViewSupported;
	public boolean isPanoramicViewSupported;
	public boolean isTrailerViewSupported;
	public boolean isCameraOnTrunk;
	public boolean isRegulationApplicable;

	

	@Override
	public void setStatus(@View int View) {}

	@Override
	public void request(@Action int action) {}

	@Override
	public void acknowledgeWarning(@UserAcknowledgement int userAck) {}

	@Override
	public void setCameraPosition(
		int x0,
		int y0,
		int x1,
		int y1
	) {}

	@Override
	public void screenPress(
		int finger,
		float x,
		float y
	) {}

	@Override
	public void screenRelease(int finger) {}

	@Override
	public void setColor(int value) {}

	@Override
	public void setBrightness(int value) {}

	@Override
	public void setContrast(int value) {}

	@Override
	public void setAutoZoomRearViewActivation(boolean value) {}

	@Override
	public void setStaticGuidelinesActivation(boolean value) {}

	@Override
	public void setDynamicGuidelinesActivation(boolean value) {}

	@Override
	public void setTrailerGuidelinesActivation(boolean value) {}
}
