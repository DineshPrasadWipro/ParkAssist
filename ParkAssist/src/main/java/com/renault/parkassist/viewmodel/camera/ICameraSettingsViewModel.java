/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/camera-settings.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.camera;

import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.LiveData;
import java.util.List;

/** Control camera settings */
public interface ICameraSettingsViewModel {
	/** Auto-zoom setting availability */
	boolean getIsAutoZoomAvailable();

	/** Define if auto-zoom feature is active */
	@NonNull
	LiveData<Boolean> getIsAutoZoomActive();

	/** Dynamic guidelines setting availability */
	boolean getIsDynamicGuidelinesAvailable();

	/** Define if dynamic guidelines have to be displayed */
	@NonNull
	LiveData<Boolean> getIsDynamicGuidelinesActive();

	/** Static guidelines setting availability */
	boolean getIsStaticGuidelinesAvailable();

	/** Define if static guidelines have to be displayed */
	@NonNull
	LiveData<Boolean> getIsStaticGuidelinesActive();

	/** Trailer guidelines setting availability */
	boolean getIsTrailerGuidelinesAvailable();

	/** Define if trailer guidelines have to be displayed */
	@NonNull
	LiveData<Boolean> getIsTrailerGuidelinesActive();

	/** Current color value for the camera */
	@NonNull
	LiveData<Integer> getColor();

	/** Color adjustment minimum value */
	int getColorMin();

	/** Color adjustment maximum value */
	int getColorMax();

	/** Current brightness value for the camera */
	@NonNull
	LiveData<Integer> getBrightness();

	/** Brightness adjustment minimum value */
	int getBrightnessMin();

	/** Brightness adjustment maximum value */
	int getBrightnessMax();

	/** Current contrast value for the camera */
	@NonNull
	LiveData<Integer> getContrast();

	/** Contrast adjustment minimum value */
	int getContrastMin();

	/** Contrast adjustement maximum value */
	int getContrastMax();

	/** Whether toolbar is enabled or not */
	@NonNull
	LiveData<Boolean> getToolbarEnabled();

	/** Whether back button in toolbar is enabled or not */
	@NonNull
	LiveData<Boolean> getBackButtonVisibility();

	/**
	 * Sets the color
	 *
	 * @param color the color to set
	 */
	public void setColor(int color);

	/**
	 * Sets the brightness
	 *
	 * @param brightness the brightness to set
	 */
	public void setBrightness(int brightness);

	/**
	 * Sets the contrast
	 *
	 * @param contrast the contrast to set
	 */
	public void setContrast(int contrast);

	/**
	 * Activate or de-activate static guidelines
	 *
	 * @param active true to activate, false to de-activate
	 */
	public void setStaticGuidelines(boolean active);

	/**
	 * Activate or de-activate dynamic guidelines
	 *
	 * @param active true to activate, false to de-activate
	 */
	public void setDynamicGuidelines(boolean active);

	/**
	 * Activate or de-activate trailer guidelines
	 *
	 * @param active true to activate, false to de-activate
	 */
	public void setTrailerGuidelines(boolean active);

	/**
	 * Activate or de-activate auto-zoom feature
	 *
	 * @param active true to activate, false to de-activate
	 */
	public void setAutoZoom(boolean active);

	/**
	 * Navigate back from settings request to Surround View service
	 * Send request to go back to previous fragment
	 */
	public void navigateBack();
}
