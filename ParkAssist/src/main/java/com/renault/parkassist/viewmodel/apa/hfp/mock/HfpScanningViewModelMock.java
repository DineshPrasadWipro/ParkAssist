/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/hfp-scanning.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.apa.hfp.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.viewmodel.apa.hfp.HfpScanningViewModelBase;

import com.renault.parkassist.viewmodel.apa.hfp.Side;

public class HfpScanningViewModelMock extends HfpScanningViewModelBase {
	public HfpScanningViewModelMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		instruction.setValue(0);
		upaDisabledApaScanning.setValue(false);
		sonarAvmVisible.setValue(false);
		sonarRvcVisible.setValue(false);
		displayParkout.setValue(false);
		leftIndicatorSelected.setValue(false);
		rightIndicatorSelected.setValue(false);
		backgroundResource.setValue(0);
		leftParkingSlotParallelVisible.setValue(false);
		rightParkingSlotParallelVisible.setValue(false);
		leftParkingSlotPerpendicularVisible.setValue(false);
		rightParkingSlotPerpendicularVisible.setValue(false);
		leftSlotResource.setValue(0);
		rightSlotResource.setValue(0);
		carFrontArrowResourceVisible.setValue(false);
		carFrontStopResourceVisible.setValue(false);
		rearLeftShortArrowVisible.setValue(false);
		rearRightShortArrowVisible.setValue(false);
		rearLeftLongArrowVisible.setValue(false);
		rearRightLongArrowVisible.setValue(false);
		rearArrowResourceVisible.setValue(false);
		maneuverParallelButtonSelected.setValue(false);
		maneuverParallelButtonEnabled.setValue(false);
		maneuverPerpendicularButtonSelected.setValue(false);
		maneuverPerpendicularButtonEnabled.setValue(false);
		maneuverParkoutButtonSelected.setValue(false);
		maneuverParkoutButtonEnabled.setValue(false);
	}

	public void postReset() {
		instruction.postValue(0);
		upaDisabledApaScanning.postValue(false);
		sonarAvmVisible.postValue(false);
		sonarRvcVisible.postValue(false);
		displayParkout.postValue(false);
		leftIndicatorSelected.postValue(false);
		rightIndicatorSelected.postValue(false);
		backgroundResource.postValue(0);
		leftParkingSlotParallelVisible.postValue(false);
		rightParkingSlotParallelVisible.postValue(false);
		leftParkingSlotPerpendicularVisible.postValue(false);
		rightParkingSlotPerpendicularVisible.postValue(false);
		leftSlotResource.postValue(0);
		rightSlotResource.postValue(0);
		carFrontArrowResourceVisible.postValue(false);
		carFrontStopResourceVisible.postValue(false);
		rearLeftShortArrowVisible.postValue(false);
		rearRightShortArrowVisible.postValue(false);
		rearLeftLongArrowVisible.postValue(false);
		rearRightLongArrowVisible.postValue(false);
		rearArrowResourceVisible.postValue(false);
		maneuverParallelButtonSelected.postValue(false);
		maneuverParallelButtonEnabled.postValue(false);
		maneuverPerpendicularButtonSelected.postValue(false);
		maneuverPerpendicularButtonEnabled.postValue(false);
		maneuverParkoutButtonSelected.postValue(false);
		maneuverParkoutButtonEnabled.postValue(false);
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getInstruction() {
		return instruction;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getUpaDisabledApaScanning() {
		return upaDisabledApaScanning;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getSonarAvmVisible() {
		return sonarAvmVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getSonarRvcVisible() {
		return sonarRvcVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getDisplayParkout() {
		return displayParkout;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getLeftIndicatorSelected() {
		return leftIndicatorSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRightIndicatorSelected() {
		return rightIndicatorSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getBackgroundResource() {
		return backgroundResource;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getLeftParkingSlotParallelVisible() {
		return leftParkingSlotParallelVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRightParkingSlotParallelVisible() {
		return rightParkingSlotParallelVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getLeftParkingSlotPerpendicularVisible() {
		return leftParkingSlotPerpendicularVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRightParkingSlotPerpendicularVisible() {
		return rightParkingSlotPerpendicularVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getLeftSlotResource() {
		return leftSlotResource;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getRightSlotResource() {
		return rightSlotResource;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCarFrontArrowResourceVisible() {
		return carFrontArrowResourceVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCarFrontStopResourceVisible() {
		return carFrontStopResourceVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRearLeftShortArrowVisible() {
		return rearLeftShortArrowVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRearRightShortArrowVisible() {
		return rearRightShortArrowVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRearLeftLongArrowVisible() {
		return rearLeftLongArrowVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRearRightLongArrowVisible() {
		return rearRightLongArrowVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRearArrowResourceVisible() {
		return rearArrowResourceVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParallelButtonSelected() {
		return maneuverParallelButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParallelButtonEnabled() {
		return maneuverParallelButtonEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverPerpendicularButtonSelected() {
		return maneuverPerpendicularButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverPerpendicularButtonEnabled() {
		return maneuverPerpendicularButtonEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParkoutButtonSelected() {
		return maneuverParkoutButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParkoutButtonEnabled() {
		return maneuverParkoutButtonEnabled;
	}

	protected MutableLiveData<Integer> instruction = new MutableLiveData<>();
	protected MutableLiveData<Boolean> upaDisabledApaScanning = new MutableLiveData<>();
	protected MutableLiveData<Boolean> sonarAvmVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> sonarRvcVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> displayParkout = new MutableLiveData<>();
	protected MutableLiveData<Boolean> leftIndicatorSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rightIndicatorSelected = new MutableLiveData<>();
	protected MutableLiveData<Integer> backgroundResource = new MutableLiveData<>();
	protected MutableLiveData<Boolean> leftParkingSlotParallelVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rightParkingSlotParallelVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> leftParkingSlotPerpendicularVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rightParkingSlotPerpendicularVisible = new MutableLiveData<>();
	protected MutableLiveData<Integer> leftSlotResource = new MutableLiveData<>();
	protected MutableLiveData<Integer> rightSlotResource = new MutableLiveData<>();
	protected MutableLiveData<Boolean> carFrontArrowResourceVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> carFrontStopResourceVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rearLeftShortArrowVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rearRightShortArrowVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rearLeftLongArrowVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rearRightLongArrowVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rearArrowResourceVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParallelButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParallelButtonEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverPerpendicularButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverPerpendicularButtonEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParkoutButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParkoutButtonEnabled = new MutableLiveData<>();

	

	@Override
	public void start() {}

	@Override
	public void stop() {}

	@Override
	public void setManeuver(int maneuverType) {}
}
