/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/camera-settings.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.camera.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.viewmodel.camera.CameraSettingsViewModelBase;

public class CameraSettingsViewModelMock extends CameraSettingsViewModelBase {
	public CameraSettingsViewModelMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		isAutoZoomAvailable = true;
		isAutoZoomActive.setValue(false);
		isDynamicGuidelinesAvailable = true;
		isDynamicGuidelinesActive.setValue(false);
		isStaticGuidelinesAvailable = true;
		isStaticGuidelinesActive.setValue(false);
		isTrailerGuidelinesAvailable = true;
		isTrailerGuidelinesActive.setValue(false);
		color.setValue(0);
		colorMin = 0;
		colorMax = 20;
		brightness.setValue(0);
		brightnessMin = 0;
		brightnessMax = 20;
		contrast.setValue(0);
		contrastMin = 0;
		contrastMax = 20;
		toolbarEnabled.setValue(false);
		backButtonVisibility.setValue(false);
	}

	public void postReset() {
		isAutoZoomAvailable = true;
		isAutoZoomActive.postValue(false);
		isDynamicGuidelinesAvailable = true;
		isDynamicGuidelinesActive.postValue(false);
		isStaticGuidelinesAvailable = true;
		isStaticGuidelinesActive.postValue(false);
		isTrailerGuidelinesAvailable = true;
		isTrailerGuidelinesActive.postValue(false);
		color.postValue(0);
		colorMin = 0;
		colorMax = 20;
		brightness.postValue(0);
		brightnessMin = 0;
		brightnessMax = 20;
		contrast.postValue(0);
		contrastMin = 0;
		contrastMax = 20;
		toolbarEnabled.postValue(false);
		backButtonVisibility.postValue(false);
	}

	@Override
	public boolean getIsAutoZoomAvailable() {
		return isAutoZoomAvailable;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getIsAutoZoomActive() {
		return isAutoZoomActive;
	}

	@Override
	public boolean getIsDynamicGuidelinesAvailable() {
		return isDynamicGuidelinesAvailable;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getIsDynamicGuidelinesActive() {
		return isDynamicGuidelinesActive;
	}

	@Override
	public boolean getIsStaticGuidelinesAvailable() {
		return isStaticGuidelinesAvailable;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getIsStaticGuidelinesActive() {
		return isStaticGuidelinesActive;
	}

	@Override
	public boolean getIsTrailerGuidelinesAvailable() {
		return isTrailerGuidelinesAvailable;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getIsTrailerGuidelinesActive() {
		return isTrailerGuidelinesActive;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getColor() {
		return color;
	}

	@Override
	public int getColorMin() {
		return colorMin;
	}

	@Override
	public int getColorMax() {
		return colorMax;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getBrightness() {
		return brightness;
	}

	@Override
	public int getBrightnessMin() {
		return brightnessMin;
	}

	@Override
	public int getBrightnessMax() {
		return brightnessMax;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getContrast() {
		return contrast;
	}

	@Override
	public int getContrastMin() {
		return contrastMin;
	}

	@Override
	public int getContrastMax() {
		return contrastMax;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getToolbarEnabled() {
		return toolbarEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getBackButtonVisibility() {
		return backButtonVisibility;
	}

	public boolean isAutoZoomAvailable;
	protected MutableLiveData<Boolean> isAutoZoomActive = new MutableLiveData<>();
	public boolean isDynamicGuidelinesAvailable;
	protected MutableLiveData<Boolean> isDynamicGuidelinesActive = new MutableLiveData<>();
	public boolean isStaticGuidelinesAvailable;
	protected MutableLiveData<Boolean> isStaticGuidelinesActive = new MutableLiveData<>();
	public boolean isTrailerGuidelinesAvailable;
	protected MutableLiveData<Boolean> isTrailerGuidelinesActive = new MutableLiveData<>();
	protected MutableLiveData<Integer> color = new MutableLiveData<>();
	public int colorMin;
	public int colorMax;
	protected MutableLiveData<Integer> brightness = new MutableLiveData<>();
	public int brightnessMin;
	public int brightnessMax;
	protected MutableLiveData<Integer> contrast = new MutableLiveData<>();
	public int contrastMin;
	public int contrastMax;
	protected MutableLiveData<Boolean> toolbarEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> backButtonVisibility = new MutableLiveData<>();

	

	@Override
	public void setColor(int color) {}

	@Override
	public void setBrightness(int brightness) {}

	@Override
	public void setContrast(int contrast) {}

	@Override
	public void setStaticGuidelines(boolean active) {}

	@Override
	public void setDynamicGuidelines(boolean active) {}

	@Override
	public void setTrailerGuidelines(boolean active) {}

	@Override
	public void setAutoZoom(boolean active) {}

	@Override
	public void navigateBack() {}
}
