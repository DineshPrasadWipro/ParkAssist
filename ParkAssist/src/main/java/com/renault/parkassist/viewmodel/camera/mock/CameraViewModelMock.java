/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/camera.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.camera.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.viewmodel.camera.CameraViewModelBase;

import com.renault.parkassist.viewmodel.camera.AvmCameraSize;
import com.renault.parkassist.viewmodel.camera.CameraIndication;
import com.renault.parkassist.viewmodel.camera.CameraOverlay;
import com.renault.parkassist.viewmodel.camera.CameraSize;
import com.renault.parkassist.viewmodel.camera.Finger;

public class CameraViewModelMock extends CameraViewModelBase {
	public CameraViewModelMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		showTailgateOpenedWarning.setValue(false);
		cameraIndication.setValue(CameraIndication.NONE);
		easyParkIndication.setValue(false);
		raebOffVisible.setValue(false);
		cameraSize.setValue(new AvmCameraSize());
		cameraOverlay.setValue(CameraOverlay.NONE);
		cameraGravity.setValue(0);
		cameraVisible.setValue(false);
		cameraError.setValue(false);
		updateCameraViewPosition.setValue(false);
		cameraMaskVisible.setValue(false);
	}

	public void postReset() {
		showTailgateOpenedWarning.postValue(false);
		cameraIndication.postValue(CameraIndication.NONE);
		easyParkIndication.postValue(false);
		raebOffVisible.postValue(false);
		cameraSize.postValue(new AvmCameraSize());
		cameraOverlay.postValue(CameraOverlay.NONE);
		cameraGravity.postValue(0);
		cameraVisible.postValue(false);
		cameraError.postValue(false);
		updateCameraViewPosition.postValue(false);
		cameraMaskVisible.postValue(false);
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getShowTailgateOpenedWarning() {
		return showTailgateOpenedWarning;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getCameraIndication() {
		return cameraIndication;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getEasyParkIndication() {
		return easyParkIndication;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRaebOffVisible() {
		return raebOffVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<AvmCameraSize> getCameraSize() {
		return cameraSize;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getCameraOverlay() {
		return cameraOverlay;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getCameraGravity() {
		return cameraGravity;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCameraVisible() {
		return cameraVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCameraError() {
		return cameraError;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getUpdateCameraViewPosition() {
		return updateCameraViewPosition;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCameraMaskVisible() {
		return cameraMaskVisible;
	}

	protected MutableLiveData<Boolean> showTailgateOpenedWarning = new MutableLiveData<>();
	protected MutableLiveData<Integer> cameraIndication = new MutableLiveData<>();
	protected MutableLiveData<Boolean> easyParkIndication = new MutableLiveData<>();
	protected MutableLiveData<Boolean> raebOffVisible = new MutableLiveData<>();
	protected MutableLiveData<AvmCameraSize> cameraSize = new MutableLiveData<>();
	protected MutableLiveData<Integer> cameraOverlay = new MutableLiveData<>();
	protected MutableLiveData<Integer> cameraGravity = new MutableLiveData<>();
	protected MutableLiveData<Boolean> cameraVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> cameraError = new MutableLiveData<>();
	protected MutableLiveData<Boolean> updateCameraViewPosition = new MutableLiveData<>();
	protected MutableLiveData<Boolean> cameraMaskVisible = new MutableLiveData<>();

	

	@Override
	public void screenPress(
		@Finger int finger,
		float x,
		float y
	) {}

	@Override
	public void screenRelease(@Finger int finger) {}

	@Override
	public void setCameraViewPosition(
		int x0,
		int y0,
		int x1,
		int y1
	) {}
}
