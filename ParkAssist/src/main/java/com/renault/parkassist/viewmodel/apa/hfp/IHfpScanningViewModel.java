/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/hfp-scanning.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.apa.hfp;

import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.LiveData;
import java.util.List;

/**
 * Handles automatic park assist state.
 *
 * _Automatic Parking Assist  - Feature ID : _
 */
public interface IHfpScanningViewModel {
	/** The instruction the user needs to follow as a resource id. */
	@NonNull
	LiveData<Integer> getInstruction();

	/** Whether upa sensors are disabled in apa scanning */
	@NonNull
	LiveData<Boolean> getUpaDisabledApaScanning();

	/** Listen to Surround State to handle avm sonar visibility when speed too high */
	@NonNull
	LiveData<Boolean> getSonarAvmVisible();

	/** Listen to DisplayRequest to handle rvc sonar visibility when speed too high */
	@NonNull
	LiveData<Boolean> getSonarRvcVisible();

	/** Whether we display `hfp parkout confirmation` or not */
	@NonNull
	LiveData<Boolean> getDisplayParkout();

	/** Whether we selected left scanning */
	@NonNull
	LiveData<Boolean> getLeftIndicatorSelected();

	/** Whether we selected right scanning */
	@NonNull
	LiveData<Boolean> getRightIndicatorSelected();

	/** The background parking slot to display */
	@NonNull
	LiveData<Integer> getBackgroundResource();

	/** Whether the left Parking Slot in Parallel Maneuver is visible */
	@NonNull
	LiveData<Boolean> getLeftParkingSlotParallelVisible();

	/** Whether the right Parking Slot in Parallel Maneuver is visible */
	@NonNull
	LiveData<Boolean> getRightParkingSlotParallelVisible();

	/** Whether the left Parking Slot in Perpendicular Maneuver is visible */
	@NonNull
	LiveData<Boolean> getLeftParkingSlotPerpendicularVisible();

	/** Whether the right Parking Slot in Perpendicular Maneuver is visible */
	@NonNull
	LiveData<Boolean> getRightParkingSlotPerpendicularVisible();

	/** The left Parking Slot Resource to display */
	@NonNull
	LiveData<Integer> getLeftSlotResource();

	/** The right Parking Slot Resource to display */
	@NonNull
	LiveData<Integer> getRightSlotResource();

	/** Whether we have to display arrow front car */
	@NonNull
	LiveData<Boolean> getCarFrontArrowResourceVisible();

	/** Whether we have to display stop front car */
	@NonNull
	LiveData<Boolean> getCarFrontStopResourceVisible();

	/** Whether we have to display rear Left Short Arrow */
	@NonNull
	LiveData<Boolean> getRearLeftShortArrowVisible();

	/** Whether we have to display rear Right Short Arrow */
	@NonNull
	LiveData<Boolean> getRearRightShortArrowVisible();

	/** Whether we have to display rear Left Long Arrow */
	@NonNull
	LiveData<Boolean> getRearLeftLongArrowVisible();

	/** Whether we have to display rear Right Long Arrow */
	@NonNull
	LiveData<Boolean> getRearRightLongArrowVisible();

	/** Whether we have to display rear arrow */
	@NonNull
	LiveData<Boolean> getRearArrowResourceVisible();

	/** Current maneuver parallel button selection state */
	@NonNull
	LiveData<Boolean> getManeuverParallelButtonSelected();

	/** Current maneuver parallel button state */
	@NonNull
	LiveData<Boolean> getManeuverParallelButtonEnabled();

	/** Current maneuver perpendicular button selection state */
	@NonNull
	LiveData<Boolean> getManeuverPerpendicularButtonSelected();

	/** Current maneuver perpendicular button state */
	@NonNull
	LiveData<Boolean> getManeuverPerpendicularButtonEnabled();

	/** Current maneuver parkout button selection state */
	@NonNull
	LiveData<Boolean> getManeuverParkoutButtonSelected();

	/** Current maneuver parkout button button state */
	@NonNull
	LiveData<Boolean> getManeuverParkoutButtonEnabled();

	/**
	 * This function is the entry point for Apa camera scenarios.
	 * It will decide what mode to set by default.
	 * To be called when lifecycle is attached to viewModels livedatas
	 */
	public void start();

	/**
	 * This function is the exit point for Apa camera scenarios.
	 * It will decide what how to properly leave Apa.
	 * To be called when lifecycle is detached to viewModels livedatas
	 */
	public void stop();

	/**
	 * Switch the maneuver mode.
	 *
	 * @param maneuverType
	 */
	public void setManeuver(int maneuverType);
}
