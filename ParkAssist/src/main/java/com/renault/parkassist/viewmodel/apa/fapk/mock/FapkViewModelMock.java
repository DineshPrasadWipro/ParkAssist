/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/fapk.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.apa.fapk.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.viewmodel.apa.fapk.FapkViewModelBase;

public class FapkViewModelMock extends FapkViewModelBase {
	public FapkViewModelMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		instruction.setValue(0);
		maneuverParallelButtonSelected.setValue(false);
		maneuverParallelButtonEnabled.setValue(false);
		maneuverPerpendicularButtonSelected.setValue(false);
		maneuverPerpendicularButtonEnabled.setValue(false);
		maneuverParkoutButtonSelected.setValue(false);
		maneuverParkoutButtonEnabled.setValue(false);
		maneuverStopSwitchButtonVisible.setValue(false);
		maneuverStartSwitchButtonVisible.setValue(false);
		maneuverStartSwitchButtonEnabled.setValue(false);
		maneuverStartSwitchButtonSelected.setValue(false);
		maneuverStopSwitchButtonSelected.setValue(false);
		settingsVisible.setValue(false);
		maneuverParallelVisible = false;
		maneuverPerpendicularVisible = false;
		maneuverParkoutVisible = false;
	}

	public void postReset() {
		instruction.postValue(0);
		maneuverParallelButtonSelected.postValue(false);
		maneuverParallelButtonEnabled.postValue(false);
		maneuverPerpendicularButtonSelected.postValue(false);
		maneuverPerpendicularButtonEnabled.postValue(false);
		maneuverParkoutButtonSelected.postValue(false);
		maneuverParkoutButtonEnabled.postValue(false);
		maneuverStopSwitchButtonVisible.postValue(false);
		maneuverStartSwitchButtonVisible.postValue(false);
		maneuverStartSwitchButtonEnabled.postValue(false);
		maneuverStartSwitchButtonSelected.postValue(false);
		maneuverStopSwitchButtonSelected.postValue(false);
		settingsVisible.postValue(false);
		maneuverParallelVisible = false;
		maneuverPerpendicularVisible = false;
		maneuverParkoutVisible = false;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getInstruction() {
		return instruction;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParallelButtonSelected() {
		return maneuverParallelButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParallelButtonEnabled() {
		return maneuverParallelButtonEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverPerpendicularButtonSelected() {
		return maneuverPerpendicularButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverPerpendicularButtonEnabled() {
		return maneuverPerpendicularButtonEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParkoutButtonSelected() {
		return maneuverParkoutButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverParkoutButtonEnabled() {
		return maneuverParkoutButtonEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverStopSwitchButtonVisible() {
		return maneuverStopSwitchButtonVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverStartSwitchButtonVisible() {
		return maneuverStartSwitchButtonVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverStartSwitchButtonEnabled() {
		return maneuverStartSwitchButtonEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverStartSwitchButtonSelected() {
		return maneuverStartSwitchButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getManeuverStopSwitchButtonSelected() {
		return maneuverStopSwitchButtonSelected;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getSettingsVisible() {
		return settingsVisible;
	}

	@Override
	public boolean getManeuverParallelVisible() {
		return maneuverParallelVisible;
	}

	@Override
	public boolean getManeuverPerpendicularVisible() {
		return maneuverPerpendicularVisible;
	}

	@Override
	public boolean getManeuverParkoutVisible() {
		return maneuverParkoutVisible;
	}

	protected MutableLiveData<Integer> instruction = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParallelButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParallelButtonEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverPerpendicularButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverPerpendicularButtonEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParkoutButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverParkoutButtonEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverStopSwitchButtonVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverStartSwitchButtonVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverStartSwitchButtonEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverStartSwitchButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> maneuverStopSwitchButtonSelected = new MutableLiveData<>();
	protected MutableLiveData<Boolean> settingsVisible = new MutableLiveData<>();
	public boolean maneuverParallelVisible;
	public boolean maneuverPerpendicularVisible;
	public boolean maneuverParkoutVisible;

	

	@Override
	public void maneuverStart() {}

	@Override
	public void maneuverStop() {}

	@Override
	public void setManeuver(int maneuverType) {}
}
