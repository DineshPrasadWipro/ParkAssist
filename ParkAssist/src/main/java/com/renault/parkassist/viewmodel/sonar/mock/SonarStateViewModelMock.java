/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/sonar-state.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.sonar.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.viewmodel.sonar.SonarStateViewModelBase;

import com.renault.parkassist.viewmodel.sonar.ParkingSensor;
import com.renault.parkassist.viewmodel.sonar.SensorLevel;

public class SonarStateViewModelMock extends SonarStateViewModelBase {
	public SonarStateViewModelMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		frontLeft.setValue(new ParkingSensor());
		frontCenter.setValue(new ParkingSensor());
		frontRight.setValue(new ParkingSensor());
		rearLeft.setValue(new ParkingSensor());
		rearCenter.setValue(new ParkingSensor());
		rearRight.setValue(new ParkingSensor());
		leftFront.setValue(new ParkingSensor());
		leftFrontCenter.setValue(new ParkingSensor());
		leftRearCenter.setValue(new ParkingSensor());
		leftRear.setValue(new ParkingSensor());
		rightFront.setValue(new ParkingSensor());
		rightFrontCenter.setValue(new ParkingSensor());
		rightRearCenter.setValue(new ParkingSensor());
		rightRear.setValue(new ParkingSensor());
		obstacle.setValue(false);
		frontEnabled.setValue(false);
		rearEnabled.setValue(false);
		flankEnabled.setValue(false);
		avatarVisible.setValue(false);
		closeVisible.setValue(false);
	}

	public void postReset() {
		frontLeft.postValue(new ParkingSensor());
		frontCenter.postValue(new ParkingSensor());
		frontRight.postValue(new ParkingSensor());
		rearLeft.postValue(new ParkingSensor());
		rearCenter.postValue(new ParkingSensor());
		rearRight.postValue(new ParkingSensor());
		leftFront.postValue(new ParkingSensor());
		leftFrontCenter.postValue(new ParkingSensor());
		leftRearCenter.postValue(new ParkingSensor());
		leftRear.postValue(new ParkingSensor());
		rightFront.postValue(new ParkingSensor());
		rightFrontCenter.postValue(new ParkingSensor());
		rightRearCenter.postValue(new ParkingSensor());
		rightRear.postValue(new ParkingSensor());
		obstacle.postValue(false);
		frontEnabled.postValue(false);
		rearEnabled.postValue(false);
		flankEnabled.postValue(false);
		avatarVisible.postValue(false);
		closeVisible.postValue(false);
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getFrontLeft() {
		return frontLeft;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getFrontCenter() {
		return frontCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getFrontRight() {
		return frontRight;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRearLeft() {
		return rearLeft;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRearCenter() {
		return rearCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRearRight() {
		return rearRight;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getLeftFront() {
		return leftFront;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getLeftFrontCenter() {
		return leftFrontCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getLeftRearCenter() {
		return leftRearCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getLeftRear() {
		return leftRear;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRightFront() {
		return rightFront;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRightFrontCenter() {
		return rightFrontCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRightRearCenter() {
		return rightRearCenter;
	}

	@NonNull
	@Override
	public MutableLiveData<ParkingSensor> getRightRear() {
		return rightRear;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getObstacle() {
		return obstacle;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getFrontEnabled() {
		return frontEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRearEnabled() {
		return rearEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getFlankEnabled() {
		return flankEnabled;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getAvatarVisible() {
		return avatarVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getCloseVisible() {
		return closeVisible;
	}

	protected MutableLiveData<ParkingSensor> frontLeft = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> frontCenter = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> frontRight = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rearLeft = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rearCenter = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rearRight = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> leftFront = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> leftFrontCenter = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> leftRearCenter = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> leftRear = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rightFront = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rightFrontCenter = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rightRearCenter = new MutableLiveData<>();
	protected MutableLiveData<ParkingSensor> rightRear = new MutableLiveData<>();
	protected MutableLiveData<Boolean> obstacle = new MutableLiveData<>();
	protected MutableLiveData<Boolean> frontEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> rearEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> flankEnabled = new MutableLiveData<>();
	protected MutableLiveData<Boolean> avatarVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> closeVisible = new MutableLiveData<>();

	

	@Override
	public void enableFront(boolean enable) {}

	@Override
	public void enableRear(boolean enable) {}

	@Override
	public void enableFlank(boolean enable) {}
}
