/**
 * This is a generated file: do not modify.
 *
 * Generated by midl v2.1.0 from 'ParkAssist/vm-specification/hfp-guidance.ts'.
 *
 * Copyright (c) 2019 Renault SW Labs
 *
 * Developed by Renault SW Labs, an affiliate of RENAULT S.A.S. which holds all
 * intellectual property rights. Use of this software is subject to a specific
 * license granted by RENAULT S.A.S.
 */
package com.renault.parkassist.viewmodel.apa.hfp.mock;


import android.app.Application;
import androidx.annotation.FloatRange;
import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.Size;
import androidx.lifecycle.MutableLiveData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.renault.parkassist.viewmodel.apa.hfp.HfpGuidanceViewModelBase;

public class HfpGuidanceViewModelMock extends HfpGuidanceViewModelBase {
	public HfpGuidanceViewModelMock(@NonNull Application application) {
		super(application);
		this.reset();
	}

	public void reset() {
		backgroundParallelLeftVisible.setValue(false);
		backgroundParallelRightVisible.setValue(false);
		parallelLeftVehicleCenterCutVisible.setValue(false);
		parallelRightVehicleCenterCutVisible.setValue(false);
		parallelLeftVehicleCenterFrontVisible.setValue(false);
		parallelRightVehicleCenterFrontVisible.setValue(false);
		parallelLeftVehicleCenterBackVisible.setValue(false);
		parallelRightVehicleCenterBackVisible.setValue(false);
		parallelLeftVehicleCenterVisible.setValue(false);
		parallelRightVehicleCenterVisible.setValue(false);
		parallelLeftParkVisible.setValue(false);
		parallelRightParkVisible.setValue(false);
		parkoutLeftVehicleLeftVisible.setValue(false);
		parkoutRightVehicleRightVisible.setValue(false);
		backgroundPerpendicularCenterVisible.setValue(false);
		perpendicularVehicleCenterParkVisible.setValue(false);
		perpendicularVehicleCenterFrontVisible.setValue(false);
		perpendicularVehicleCenterBackVisible.setValue(false);
		perpendicularVehicleCenterBackStopBackVisible.setValue(false);
		perpendicularVehicleCenterFrontStopFrontVisible.setValue(false);
		perpendicularLeftVehicleCenterCutVisible.setValue(false);
		perpendicularRightVehicleCenterCutVisible.setValue(false);
		extendedInstruction.setValue(0);
		maneuverCompletion.setValue(0);
		isForwardGauge.setValue(false);
		gaugeVisible.setValue(false);
		gaugeColor.setValue(0);
		raebSonarOffVisible.setValue(false);
		isCameraVisible.setValue(false);
	}

	public void postReset() {
		backgroundParallelLeftVisible.postValue(false);
		backgroundParallelRightVisible.postValue(false);
		parallelLeftVehicleCenterCutVisible.postValue(false);
		parallelRightVehicleCenterCutVisible.postValue(false);
		parallelLeftVehicleCenterFrontVisible.postValue(false);
		parallelRightVehicleCenterFrontVisible.postValue(false);
		parallelLeftVehicleCenterBackVisible.postValue(false);
		parallelRightVehicleCenterBackVisible.postValue(false);
		parallelLeftVehicleCenterVisible.postValue(false);
		parallelRightVehicleCenterVisible.postValue(false);
		parallelLeftParkVisible.postValue(false);
		parallelRightParkVisible.postValue(false);
		parkoutLeftVehicleLeftVisible.postValue(false);
		parkoutRightVehicleRightVisible.postValue(false);
		backgroundPerpendicularCenterVisible.postValue(false);
		perpendicularVehicleCenterParkVisible.postValue(false);
		perpendicularVehicleCenterFrontVisible.postValue(false);
		perpendicularVehicleCenterBackVisible.postValue(false);
		perpendicularVehicleCenterBackStopBackVisible.postValue(false);
		perpendicularVehicleCenterFrontStopFrontVisible.postValue(false);
		perpendicularLeftVehicleCenterCutVisible.postValue(false);
		perpendicularRightVehicleCenterCutVisible.postValue(false);
		extendedInstruction.postValue(0);
		maneuverCompletion.postValue(0);
		isForwardGauge.postValue(false);
		gaugeVisible.postValue(false);
		gaugeColor.postValue(0);
		raebSonarOffVisible.postValue(false);
		isCameraVisible.postValue(false);
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getBackgroundParallelLeftVisible() {
		return backgroundParallelLeftVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getBackgroundParallelRightVisible() {
		return backgroundParallelRightVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelLeftVehicleCenterCutVisible() {
		return parallelLeftVehicleCenterCutVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelRightVehicleCenterCutVisible() {
		return parallelRightVehicleCenterCutVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelLeftVehicleCenterFrontVisible() {
		return parallelLeftVehicleCenterFrontVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelRightVehicleCenterFrontVisible() {
		return parallelRightVehicleCenterFrontVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelLeftVehicleCenterBackVisible() {
		return parallelLeftVehicleCenterBackVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelRightVehicleCenterBackVisible() {
		return parallelRightVehicleCenterBackVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelLeftVehicleCenterVisible() {
		return parallelLeftVehicleCenterVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelRightVehicleCenterVisible() {
		return parallelRightVehicleCenterVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelLeftParkVisible() {
		return parallelLeftParkVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParallelRightParkVisible() {
		return parallelRightParkVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParkoutLeftVehicleLeftVisible() {
		return parkoutLeftVehicleLeftVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getParkoutRightVehicleRightVisible() {
		return parkoutRightVehicleRightVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getBackgroundPerpendicularCenterVisible() {
		return backgroundPerpendicularCenterVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularVehicleCenterParkVisible() {
		return perpendicularVehicleCenterParkVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularVehicleCenterFrontVisible() {
		return perpendicularVehicleCenterFrontVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularVehicleCenterBackVisible() {
		return perpendicularVehicleCenterBackVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularVehicleCenterBackStopBackVisible() {
		return perpendicularVehicleCenterBackStopBackVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularVehicleCenterFrontStopFrontVisible() {
		return perpendicularVehicleCenterFrontStopFrontVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularLeftVehicleCenterCutVisible() {
		return perpendicularLeftVehicleCenterCutVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getPerpendicularRightVehicleCenterCutVisible() {
		return perpendicularRightVehicleCenterCutVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getExtendedInstruction() {
		return extendedInstruction;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getManeuverCompletion() {
		return maneuverCompletion;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getIsForwardGauge() {
		return isForwardGauge;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getGaugeVisible() {
		return gaugeVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Integer> getGaugeColor() {
		return gaugeColor;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getRaebSonarOffVisible() {
		return raebSonarOffVisible;
	}

	@NonNull
	@Override
	public MutableLiveData<Boolean> getIsCameraVisible() {
		return isCameraVisible;
	}

	protected MutableLiveData<Boolean> backgroundParallelLeftVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> backgroundParallelRightVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelLeftVehicleCenterCutVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelRightVehicleCenterCutVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelLeftVehicleCenterFrontVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelRightVehicleCenterFrontVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelLeftVehicleCenterBackVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelRightVehicleCenterBackVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelLeftVehicleCenterVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelRightVehicleCenterVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelLeftParkVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parallelRightParkVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parkoutLeftVehicleLeftVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> parkoutRightVehicleRightVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> backgroundPerpendicularCenterVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularVehicleCenterParkVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularVehicleCenterFrontVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularVehicleCenterBackVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularVehicleCenterBackStopBackVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularVehicleCenterFrontStopFrontVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularLeftVehicleCenterCutVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> perpendicularRightVehicleCenterCutVisible = new MutableLiveData<>();
	protected MutableLiveData<Integer> extendedInstruction = new MutableLiveData<>();
	protected MutableLiveData<Integer> maneuverCompletion = new MutableLiveData<>();
	protected MutableLiveData<Boolean> isForwardGauge = new MutableLiveData<>();
	protected MutableLiveData<Boolean> gaugeVisible = new MutableLiveData<>();
	protected MutableLiveData<Integer> gaugeColor = new MutableLiveData<>();
	protected MutableLiveData<Boolean> raebSonarOffVisible = new MutableLiveData<>();
	protected MutableLiveData<Boolean> isCameraVisible = new MutableLiveData<>();

	

	@Override
	public void requestCameraSwitch(boolean cameraOn) {}
}
